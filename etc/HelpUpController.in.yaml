---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: true
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: true
# Where to look for state libraries
StatesLibraries:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@"
- "@XSENS_PLUGIN_STATES_LIBRARIES@"
# Where to look for state files
StatesFiles:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@/data"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@/data"
- "@XSENS_PLUGIN_STATES_FILES@"
# If true, state factory will be more verbose
VerboseStateFactory: false

# Initial position of main robot (still needed for mujoco)
# We update it in the reset state to place robot and chair depending on the human
init_pos:
  translation: [0, -1, 0.77] # e2dr
  # translation: [0, -1, 0.75] # hrp4

Limits:
  hrp4:
    # Lower joint limits for knees to prevent overstretching
    R_KNEE_P:
      lower: 0.411
    L_KNEE_P:
      lower: 0.411
  e2dr:
    RLeg_2Y_joint:
      lower: 0.3
    LLeg_2Y_joint:
      lower: 0.3


# Additional robots to load
robots:
  chair:
    module: env/chair
  human:
    module: human
    init_pos: # placeholder value as the model will be retargeted to the real human pose: this is to avoid initial collision in physics sim
      translation: [-0.37, 0.36, 0.66]
  ground:
    module: env/ground
  # panda:
  #   module: PandaHelpUp

# General constraints, always on
constraints:
- type: contact
- type: kinematics
  damper: [0.1, 0.01, 0.5]
  velocityPercent: 0.5
- type: compoundJoint
# - type: kinematics
#   robot: panda
#   damper: [0.1, 0.01, 0.5]
#   velocityPercent: 0.5
# - type:  dynamics
#   damper: [0.1, 0.01, 0.5]
# - type:  dynamics
#   robot: human
#   infTorque: true
#   damper: [0.1, 0.01, 0.5]

# Collision constraint
collisions:
- type: collision # main robot
  useCommon: true
# - type: collision
#   r1: panda
#   r2: panda
#   useMinimal: true

# Some options for a specific robot
e2dr:
  posture:
    stiffness: 1
    weight: 10

human:
  posture:
    stiffness: 1
    weight: 10

hrp4:
  posture:
    stiffness: 1
    weight: 10


# Force limit on contacts (if not here, considered support contact and max force is m*g)
# todo : differenciate human and robot
surfacesMaxForces:
  human:
    RLegBack: 500
    LLegBack: 500
    LeftSole: 500
    RightSole: 500
    RightShoulder: 15
    Back: 15
    LCheek: 500
    RCheek: 500

# FSM states
states:

  AddHumanCollisions:
    base: CollisionState
    AddCollisionSetsBefore: [human]


  XsensHumanPose:
    base: XsensRetargetting
    robot: human
    stiffness: 1000
    weight: 10000
    start_time: 0.1
    # end_time: 15.0
    skip_iter: 1
    pause: true
    Xsens:
      human:
        bodies:
          LAnkleLink:
            forceHorizontalSegment: true #true
          RAnkleLink:
            forceHorizontalSegment: true #true
    # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/WithForcesOK.bin"
    # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/celia17nov/suit2.bin"
    # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/NoSuitNormal1.bin"
    log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/NoSuitHelpBack.bin"
    # groundingFrames: [LeftSole, RightSole] ## REPLACE WITH YOUR FRAME NAMES
    fixBaseLink: false
    initialStiffnessInterpolationDuration: 0

  Pause_inf:
    base: Meta
    transitions:
      - [Pause_2s, OK, Pause_2s, Auto]

  XsensHumanPause:
    base: Parallel
    states: [XsensHumanPose, Pause_inf]


  HelpFSM_HRP4Human:
    base: Meta
    ResetPostures: true # this resets the posture task objective to the current one
    transitions:
    - [Pause_2s, OK, RightStepFSMHRP4, Strict]
    - [RightStepFSMHRP4, OK, AddHumanCollisions, Auto]
    - [AddHumanCollisions, OK, TakePositionHRP4HumanElbow, Strict]
    - [TakePositionHRP4HumanElbow, OK, ApproachHRP4HumanElbow, Strict]
    - [ApproachHRP4HumanElbow, OK, AdjustHumanSurfaces, Strict]
    - [AdjustHumanSurfaces, OK, KeepPositionHRP4Human, Auto]
    - [KeepPositionHRP4Human, OK, GoBackInitFSMHRP4, Strict]
    - [GoBackInitFSMHRP4, OK, TakePositionHRP4HumanElbow, Strict]

  HelpFSM_HRP4Panda:
    base: Meta
    transitions:
    - [Pause_2s, OK, RightStepFSMHRP4, Strict]
    - [RightStepFSMHRP4, OK, TakePositionHRP4Panda, Strict]
    - [TakePositionHRP4Panda, OK, ApproachHRP4Panda, Strict]
    - [ApproachHRP4Panda, OK, KeepPositionHRP4Panda, Strict]
    - [KeepPositionHRP4Panda, OK, GoBackInitFSMHRP4, Strict]


  HelpDemoHRP4:
    base: Parallel
    states: [XsensHumanPose, GeneralRobotStabilizer, HelpFSM_HRP4Human]


  # RightStepFSMHRP4:
  #   base: Meta
  #   transitions:
  #   - [RobotStabilizer::GoLeft, OK, RobotStabilizer::MakeRightLiftHRP4, Auto]
  #   - [RobotStabilizer::MakeRightLiftHRP4, OK, RobotStabilizer::MakeRightStepHRP4, Auto]
  #   - [RobotStabilizer::MakeRightStepHRP4, OK, RobotStabilizer::GoCenter, Auto]

  # GoBackInitFSMHRP4:
  #   base: Meta
  #   transitions:
  #   - [RemoveHandsHRP4, OK, RobotStabilizer::GoCenter, Auto]
  #   - [RobotStabilizer::GoCenter, OK, HRP4pos, Auto]

# OK between the states is the transition if the state output is OK -> I can branch with
# - [StateA, Output1, StateB]
# - [StateA, Output2, StateC]
# If I change the state output

# Transitions map for human tracking
transitions:
# HRP4 version
- [ResetStateHRP4, OK, HelpDemoHRP4, Auto]
- [HelpDemoHRP4, OK, HelpDemoHRP4, Strict]

# E2DR version
- [ResetStateE2DR, OK, HelpDemoE2DR, Auto]
- [HelpDemoE2DR, OK, HelpDemoE2DR, Strict]



# Initial state
# init: ResetStateHRP4
init: ResetStateE2DR

# XXX For now load later because we control HRP4 with the UDPPlugin and sensor
# values are not available from the start of the controller
HRP4ObserverPipeline:
  name: MainRobPipeline                    # - Create a new pipeline
  gui: true                              #   diplay the pipeline in the GUI (default = false)
  log: true                              #   log observers (default)
  observers:                             #   declare which observers to use
  - type: Encoder                        # - Use an EncoderObserver
    config:
      #   position: encoderValues            #    - Sets joint position from encoder sensor values (default)
      #   velocity: encoderFiniteDifferences #    - Computes joint velocities by finite differences  (default)
      position: encoderValues            #    - Sets joint position from encoder sensor values (default)
      velocity: encoderFiniteDifferences #    - Computes joint velocities by finite differences  (default)
      computeFV: true                    # We now have the estimation of each joint position and velocity and the corresponding body positions and velocities,
                                          # but we are still missing the floating base
  - type: Attitude
    config:
      bodySensor: Accelerometer
  - type: KinematicInertial              # - Estimates the floating base state using the KinematicInertial observer
    update: true                         #   update the real robot instance from its results
    gui: true                            #   Displays the estimated velocity as an arrow (default)
    config:
      bodySensor: Accelerometer           # This observer only uses roll and pitch rotation information from this sensor along
                                          # with a kinematic anchor point and the robot kinematics between the anchor frame and the floating base frame.
                                          # The anchor frame is expected to be provided through a datastore callback (see below for details)

ObserverPipelines:
- name: HumanPipeline
  gui: true
  log: true
  observers:
  - type: Encoder                        # - Use an EncoderObserver
    config:
      robot: human
      updateRobot: human
      position: control # encoderValues            #    - Sets joint position from encoder sensor values (default)
      velocity: control # encoderFiniteDifferences #    - Computes joint velocities by finite differences  (default)
      computeFV: true
  - type: BodySensor                     # - Use a BodySensor observer
    update: true                        #   Update the real robot state
    gui: true                           #   Display in the gui
    config:
      robot: human
      bodySensor: FloatingBase           #   In simulation, the interface will fill this sensor with ground truth values
                                         #   The observer computes the position and velocity of the floating base
                                         #   by transforming the sensor measurements to the floating base frame
  # - type: ContactEstimation
  #   config:
  #     robot: human
  #     force_sensors: [LeftFoot,RightFoot]
  #     gainInt: 5
  #     gainExt: 5
  #     set_value_at_fb: true


Plugins: [XsensReplay, XsensPlugin, ForceShoePlugin, RobotModelUpdate] #, mc_joystick_plugin] #, UDPPlugin] # RobotModelUpdate, UDPPlugin]

UDPPlugin:
  # Global configuration options for UDPPlugin
  # These are the default values used by the plugin, they may be overriden at controller's level,
  # See https://jrl-umi3218.github.io/mc_rtc/tutorials/usage/global-plugins.html for more details
  robots:
    hrp4:
      # host: localhost
      host: hrp4
      port: 4444
      ignoredJoints:
        #joints: [CHEST_P, CHEST_Y, R_HIP_Y, R_HIP_R, R_HIP_P, L_HIP_Y, L_HIP_R, L_HIP_P, R_HAND_J0, R_HAND_J1, L_HAND_J0, L_HAND_J1, L_SHOULDER_R]
        joints: [R_HAND_J0, R_HAND_J1, L_HAND_J1, L_HAND_J0]


RobotModelUpdate:
  robot: human

# configuration for Replay plugin
XsensReplay:
  preload_logs:
    # - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/celia17nov/suit2.bin"
    # - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/SuitHelpFront.bin"
    - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/SuitHelpBack.bin"
    # - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/SuitNormal1.bin"
    # - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/SuitNormal2.bin"
    - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/NoSuitNormal1.bin"
    # - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/WithForcesOK.bin"
    # - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/NoSuitNormal2.bin"
    # - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/NoSuitHelpFront.bin"
    # - "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/NoSuitHelpBack.bin"
  # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/celia17nov/suit2.bin"
  # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/SuitHelpFront.bin"
  # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/SuitHelpBack.bin"
  # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/SuitNormal1.bin"
  # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/NoSuitNormal1.bin" #use this one
  # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/WithForcesOK.bin"
  # log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/NoSuitHelpFront.bin"
  log: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/NoSuitHelpBack.bin" #use this one
  # log: @MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/hugo/18dec2023.bin

  # log: @MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/celia03jul/QP_alone_2023-07-03.bin
  # log: @MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/celia03jul/QP_perturbed_2023-07-03.bin
  with-inputs: false
  with-outputs: false
  with-gui-inputs: false
  with-datastore-config: "@MC_CONTROLLER_RUNTIME_INSTALL_PREFIX@/etc/trajectories/log-to-datastore.yaml"
  pause: true

measuredPerson:
  # mass: 42 # Wanchen
  # mass: 55 # Celia
  hipHeight: 0.91
  mass: 77
  # withSuit: true        # 10kg
  withSuit: true
  withShoes: true       # 2*1.1kg
  # withShoes: false
  withLegs: false        # 2*2.3kg
  # withLegs: false
  withWrists: false      # 2*1.5kg

wrenchDistributionTarget:
  # robot: human
  # helpSurfaceLH: Back
  # helpSurfaceRH: RightShoulder
  # robot: hrp4
  # robot: e2dr
  targetRobot: human
  helpSurfaceLH: LeftHand
  helpSurfaceRH: RightHand
  # helpSurfaceLH: HumanBack
  # helpSurfaceRH: HumanFront


Omega:
  WithVerticalAcc: true

handContactsForBalance: false

filteredDerivation: true

ForceShoes:
  liveMode: false #add function to wait for xsens and force shoes sync in replays

# configuration for XsensHuman state
Xsens:
  liveMode: false
  human:
    bodies:
      HipsLink:
        segment: "Pelvis"
        stiffness: 1000
        weight: 1000
        offset:
          # translation: [0.05, 0, 0.1]
          translation: [0, 0, 0.15]
      TorsoLink:
        segment: "T8" #"Neck" # Sternum
        stiffness: 100
        weight: 1000
        offset:
          # translation: [0, 0, -0.31] # torso is 31cm higher than pelvis for celia model, but urdf orig is same as pelvis
          # translation: [0.1, 0, -0.27]
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      HeadLink:
        segment: "Head"
        stiffness: 1000
        weight: 1000
        offset:
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      # Getting rid of shoulder retargeting
      RArmLink:
        segment: "Right Upper Arm"
        stiffness: 500
        weight: 1000
        offset:
          translation: [0, 0, 0] # 5cm lower for celia model (whole arm)
          rotation: [0, 0, 0]
      RForearmLink:
        segment: "Right Forearm"
        stiffness: 500
        weight: 500
        offset:
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      RHandLink:
        segment: "Right Hand"
        stiffness: 500
        weight: 1000
        offset:
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      LArmLink:
        segment: "Left Upper Arm"
        stiffness: 500
        weight: 1000
        offset:
          translation: [0, 0, 0] # 5cm lower for celia model (whole arm)
          rotation: [0, 0, 0]
      # torso2lshoulder_1:
      #   segment: "Left Upper Arm"
      #   offset:
      #     translation: [0, 0.0, -0.05]
      #     rotation: [0, 0, 0]
      LForearmLink:
        segment: "Left Forearm"
        stiffness: 500
        weight: 500
        offset:
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      LHandLink:
        segment: "Left Hand"
        stiffness: 500
        weight: 1000
        offset:
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      RLegLink:
        segment: "Right Upper Leg"
        stiffness: 1000
        weight: 1000
        offset:
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      RShinLink:
        segment: "Right Lower Leg"
        stiffness: 1000
        weight: 1000
        offset:
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      RAnkleLink:
        segment: "Right Foot"
        stiffness: 500
        weight: 1000
        offset:
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      LLegLink:
        segment: "Left Upper Leg"
        stiffness: 1000
        weight: 1000
        offset:
          # translation: [0, 0, -0.12]
          translation: [0, 0, 0]
          rotation: [0, 0, 0]
      LShinLink:
        segment: "Left Lower Leg"
        stiffness: 1000
        weight: 1000
        offset:
          translation: [0, 0, 0] # 5cm higher for celia
          rotation: [0, 0, 0]
      LAnkleLink:
        segment: "Left Foot"
        stiffness: 500
        weight: 1000
        offset:
          translation: [0, 0, 0]
          rotation: [0, 0, 0]


StabilityPolytope:
  hrp4:
    polyhedron: &polyhedron
      triangle_color: [1.0, 0.0, 0.0, 0.3]
      show_triangle: true
      use_triangle_color: true
      edges:
        color: [0.75, 0.75, 0.75, 1.0]
        width: 0.003
        style: solid
      show_edges: false
      fixed_edge_color: true
      vertices:
        color: [1.0, 0.0, 0.0, 1.0]
        scale: 0.02
      show_vertices: false
      fixed_vertices_color: true
  human:
    polyhedron:
      <<: *polyhedron
      triangle_color: [0.0, 1.0, 0.0, 0.3]
  e2dr:
    polyhedron: *polyhedron
