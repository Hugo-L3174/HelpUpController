---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: true
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: false
# Where to look for state libraries
StatesLibraries:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@"
# Where to look for state files
StatesFiles:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@/data"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@/data"
# If true, state factory will be more verbose
VerboseStateFactory: false

# Initial position of HRP4
init_pos: 
  translation: [-0.20, -0.3, 0.75] # hrp4 :y = -0.4 z = 0.75 e2dr: y = -0.4 z = 0.8
  rotation: [0.0, 0.0, 1.6]


# Additional robots to load
robots:
  # chair:
  #   module: env/chair
  #   init_pos:
  #     translation: [-0.47, 0.22, -0.04] #0.0
  human:
    module: human
    init_pos:
      translation: [-0.35, 0.22, 0.6] #0.12
  ground:
    module: env/ground
    # init_pos:
    #   translation: [0, 0, 0.05]

# General constraints, always on
constraints:
- type: contact
- type:  dynamics 
  robot: hrp4 #e2dr
  damper: [0.1, 0.01, 0.5]
- type:  dynamics 
  robot: human  
  infTorque: true
  damper: [0.1, 0.01, 0.5]


# Collision constraint
collisions:
- type: collision
  useMinimal: true
# - type: collision
#   r1: human
#   r2: human
#  useMinimal: true
- type: collision
  r1: hrp4 #e2dr
  r2: human
  collisions:
    # robot left arm collision with human torso important links are L_ELBOW_P_LINK L_WRIST_Y_LINK l_wrist
    - body1: L_ELBOW_P_LINK
      body2: TorsoLink
      iDist: 0.03
      sDist: 0.001
      damping: 0
    - body1: L_WRIST_Y_LINK
      body2: TorsoLink
      iDist: 0.03
      sDist: 0.001
      damping: 0
    - body1: l_wrist
      body2: TorsoLink
      iDist: 0.003
      sDist: 0.0001
      damping: 0
    # robot right wrist collision with human torso and right arm
    - body1: r_wrist
      body2: TorsoLink
      iDist: 0.003
      sDist: 0.0001
      damping: 0
    - body1: r_wrist
      body2: RArmLink
      iDist: 0.03
      sDist: 0.001
      damping: 0
    - body1: r_wrist
      body2: RForearmLink
      iDist: 0.03
      sDist: 0.001
      damping: 0
    # robot right forearm collision with human torso and right arm
    - body1: R_WRIST_Y_LINK
      body2: TorsoLink
      iDist: 0.03
      sDist: 0.001
      damping: 0
    - body1: R_WRIST_Y_LINK
      body2: RArmLink
      iDist: 0.03
      sDist: 0.001
      damping: 0
    - body1: R_WRIST_Y_LINK
      body2: RForearmLink
      iDist: 0.03
      sDist: 0.001
      damping: 0
    - body1: R_ELBOW_P_LINK
      body2: TorsoLink
      iDist: 0.03
      sDist: 0.001
      damping: 0
    - body1: R_ELBOW_P_LINK
      body2: RArmLink
      iDist: 0.03
      sDist: 0.001
      damping: 0
    - body1: R_ELBOW_P_LINK
      body2: RForearmLink
      iDist: 0.03
      sDist: 0.001
      damping: 0




# Initial set of contacts
contacts:
- r1: hrp4 #e2dr
  r2: ground
  r1Surface: LeftFoot
  r2Surface: AllGround
- r1: hrp4 #e2dr
  r2: ground
  r1Surface: RightFoot
  r2Surface: AllGround
- r1: human
  r2: ground
  r1Surface: LeftSole
  r2Surface: AllGround
  dof: [1.0, 1.0, 1.0, 0.0, 0.0, 1.0]
- r1: human
  r2: ground
  r1Surface: RightSole
  r2Surface: AllGround
  dof: [1.0, 1.0, 1.0, 0.0, 0.0, 1.0]
# - r1: human
#   r2: chair
#   r1Surface: RCheek
#   r2Surface: Top
# - r1: human
#   r2: chair
#   r1Surface: LCheek
#   r2Surface: Top

# Some options for a specific robot
e2dr: 
  posture:
    stiffness: 1
    weight: 10

human:
  posture:
    stiffness: 1
    weight: 10

hrp4:
  posture:
    stiffness: 1
    weight: 10

# human:
#   posture:
#     stiffness: 10
#     weight: 100
#     target:
#       LArm_0: [-1.3]
#       LElbow: [0.2]
#       LForearm: [-0.9]
#       RArm_0: [1.3]
#       RElbow: [0.2]
#       RForearm: [0.9]
#       LLeg_1: [-1.57]
#       LShin_0: [1.768]
#       LAnkle_0: [-0.22]
#       RLeg_1: [-1.57]
#       RShin_0: [1.768]
#       RAnkle_0: [-0.22]
#       LHand: [0.3]
#       RHand: [0.3]

# Force limit on contacts (if not here, considered support contact and max force is m*g)
# todo : differenciate human and robot
surfacesMaxForces:
  LeftFoot: 500
  RightFoot: 500
  LeftHandFlat: 15
  RightHandFlat: 15
  LeftHand: 15
  RightHand: 15
  RLegBack: 500
  LLegBack: 500
  LeftSole: 500
  RightSole: 500
  RightShoulder: 15
  Back: 15
  LCheek: 500
  RCheek: 500

# FSM states
states:
  Wait:
    base: Pause
    duration: 10.0

  TakePosition:
    base: MetaTasks
    tasks:
      RHandTrajectory:
        type: bspline_trajectory
        robot: hrp4 #e2dr
        frame: RightHandFlat #Flat
        weight: 500.0
        stiffness: 1000.0
        duration: 3.0
        targetFrame:
          robot: human
          frame:  RightShoulder #Chest
          translation: [0.0, 0.0, 0.1]
          controlPoints:
            - [-0.2, 0.2, 0.2]
      LHandTrajectory:
        type: bspline_trajectory
        robot: hrp4 #e2dr
        frame: LeftHandFlat #Flat
        weight: 500.0
        stiffness: 1000.0
        duration: 3.0
        targetFrame:
          robot: human
          frame: Back
          translation: [0.0, 0.23, 0.1]
          controlPoints: # in target frame !
            - [-0.2, -0.2, 0.2]
    RemoveCollisionsAfter:
      r1: hrp4 #e2dr
      r2: human
      collisions:
        - body1: l_wrist
          body2: TorsoLink
          iDist: 0.003
          sDist: 0.0001
          damping: 0
        - body1: r_wrist
          body2: TorsoLink
          iDist: 0.003
          sDist: 0.0001
          damping: 0
    AddContactsAfter:
      - r1: hrp4 #e2dr
        r2: human
        r1Surface: RightHandFlat #Flat
        r2Surface: RightShoulder #Chest 
        dof: [0.0, 0.0, 0.0, 1.0, 1.0, 0.0] # last one is z axis
      - r1: hrp4 #e2dr
        r2: human
        r1Surface: LeftHandFlat #Flat
        r2Surface: Back 
        dof: [0.0, 0.0, 0.0, 1.0, 1.0, 0.0]

  MakeHandContacts:
    base: MetaTasks
    tasks: 
      RHCoP:
        # type: cop
        # frame: RightHandFlat
        # targetFrame:
        #   robot: human
        #   frame: RightShoulder
        # force: [0.0, 0.0, 10.0]
        # admittance:
        #   couple: [0.005, 0.005, 0.0]
        #   force: [0.0, 0.0, 0.005]
        type: admittance
        frame: RightHandFlat
        stiffness: [10, 10, 10, 10, 10, 1]
        damping: [6.3, 6.3, 6.3, 6.3, 6.3, 300]
        targetFrame:
          robot: human
          frame: RightShoulder
        wrench:
          couple: [0.0, 0.0, 0.0]
          force: [0.0, 0.0, 10.0]
        admittance:
          couple: [0.0, 0.0, 0.0]
          force: [0.0, 0.0, 0.001]
        completion:
            wrench:
              couple: [0.0, 0.0, 0.0]
              force: [0.0, 0.0, 5.0]
      LHCoP:
        # type: cop
        # frame: LeftHandFlat
        # targetFrame:
        #   robot: human
        #   frame: Back
        # force: [0.0, 0.0, 10.0]
        # admittance:
        #   couple: [0.005, 0.005, 0.0]
        #   force: [0.0, 0.0, 0.005]
        type: admittance
        frame: LeftHandFlat
        stiffness: [10, 10, 10, 10, 10, 1]
        damping: [6.3, 6.3, 6.3, 6.3, 6.3, 300]
        targetFrame:
          robot: human
          frame: Back
        wrench:
          couple: [0.0, 0.0, 0.0]
          force: [0.0, 0.0, 10.0]
        admittance:
          couple: [0.0, 0.0, 0.0]
          force: [0.0, 0.0, 0.001]
        completion:
            wrench:
              couple: [0.0, 0.0, 0.0]
              force: [0.0, 0.0, 5.0]
    

  KeepPosition:
    base: RobotHolding # add compliance mode to robot holding
    weight: 1000
    stiffness: 10
    AdmittanceRHand: 
      admittance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] # force control: low stiffness high damping; position control: high stiffness low damping
      stiffness: [100, 100, 100, 100, 100, 100]
      damping: [6.3, 6.3, 6.3, 6.3, 6.3, 6.3]
      maxVel: [0.2, 0.2, 0.5]
      wrench: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    AdmittanceLHand:
      admittance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.002]
      stiffness: [100, 100, 100, 100, 100, 10]
      damping: [6.3, 6.3, 6.3, 6.3, 6.3, 300]
      maxVel: [0.2, 0.2, 0.5]
      wrench: [0.0, 0.0, 0.0, 0.0, 0.0, 5.0]
    

  KeepPositionCompli:
    base:
    # base: MetaTasks
    # tasks:
    #   RHandCompli:
    #     type: compliance
    #     body: r_wrist #RArm_6AF
    #     wrench:
    #       couple: [0.0, 0.0, 0.0]
    #       force: [0.0, 0.0, 0.0]
    #   LHandCompli:
    #     type: compliance
    #     body: l_wrist #LArm_6AF
    #     wrench:
    #       couple: [0.0, 0.0, 0.0]
    #       force: [0.0, 0.0, 0.0]

  HoldingBothHands:
    base: RobotHolding
    weight: 1000
    stiffness: 10
    AdmittanceRHand: 
      admittance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.002]
      stiffness: [100, 100, 100, 100, 100, 1]
      damping: [6.3, 6.3, 6.3, 6.3, 6.3, 300]
      maxVel: [0.2, 0.2, 0.5]
      wrench: [0.0, 0.0, 0.0, 0.0, 0.0, 20.0]
    AdmittanceLHand:
      admittance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.002]
      stiffness: [100, 100, 100, 100, 100, 1]
      damping: [6.3, 6.3, 6.3, 6.3, 6.3, 300]
      maxVel: [0.2, 0.2, 0.5]
      wrench: [0.0, 0.0, 0.0, 0.0, 0.0, 20.0]




  GoBackInitHrp4:
    base: MetaTasks
    RemoveContacts:
      - r1: hrp4 #e2dr
        r2: human
        r1Surface: LeftHandFlat #Flat
        r2Surface: Back
      - r1: hrp4 #e2dr
        r2: human
        r1Surface: RightHandFlat #Flat
        r2Surface: RightShoulder
    # make bsplines to get away from human
    tasks:
      RHandTrajectory:
        type: bspline_trajectory
        robot: hrp4 #e2dr
        frame: RightHandFlat #Flat
        weight: 500.0
        stiffness: 100.0
        duration: 2.0
        targetFrame:
          robot: human
          frame: RightShoulder 
          translation: [-0.15, 0.3, 0.3]
          controlPoints:
            - [0.2, 0, 0.3]
      LHandTrajectory:
        type: bspline_trajectory
        robot: hrp4 #e2dr
        frame: LeftHandFlat #Flat
        weight: 500.0
        stiffness: 100.0
        duration: 2.0
        targetFrame:
          robot: human
          frame: Back
          translation: [-0.15, -0.3, 0.3]
          controlPoints:
            - [0.2, 0, 0.3]

  HRP4pos:
    base: MetaTasks
    tasks:
      HRP4HalfSit:
        type: posture
        robot: hrp4
        completion:
          eval: 0.01
        stiffness: 3
        weight: 1000
        target:
          L_HIP_Y: [0.0]
          L_HIP_R: [0.0]
          R_KNEE_P: [0.719]
          L_KNEE_P: [0.719]
          R_ELBOW_P: [-0.524]
          L_ELBOW_P: [-0.524]
          R_HIP_Y: [0.0]
          R_HIP_R: [-0.02]
          R_HIP_P: [-0.384]
          R_KNEE_P: [0.719]
          R_ANKLE_P: [-0.335]
          R_ANKLE_R: [0.02]
          L_HIP_Y: [0.0]
          L_HIP_R: [0.02]
          L_HIP_P: [-0.384]
          L_KNEE_P: [0.719]
          L_ANKLE_P: [-0.335]
          L_ANKLE_R: [-0.02]
          CHEST_P: [0.14]
          CHEST_Y: [0.0]
          NECK_Y: [0.0]
          NECK_P: [0.0]
          R_SHOULDER_P: [-0.052]
          R_SHOULDER_R: [-0.175]
          R_SHOULDER_Y: [0.0]
          R_ELBOW_P: [-0.524]
          R_WRIST_Y: [0.0]
          R_WRIST_P: [0.0]
          R_WRIST_R: [0.0]
          L_SHOULDER_P: [-0.052]
          L_SHOULDER_R: [-0.175]
          L_SHOULDER_Y: [0.0]
          L_ELBOW_P: [-0.524]
          L_WRIST_Y: [0.0]
          L_WRIST_P: [0.0]
          L_WRIST_R: [0.0]


  XsensHumanPose:
    base: XsensHuman
    robot: human
    stiffness: 1000

  Pause_inf:
    base: Meta
    transitions: 
      - [Pause_2s, OK, Pause_2s, Auto]
    
  XsensHumanPause:
    base: Parallel
    states: [XsensHumanPose, Pause_inf]
       

  TakePosition+hum:
    base: Parallel
    states: [TakePosition, XsensHumanPose]

  holdingUp:
    base: Parallel
    states: [Holding, XsensHumanPose, Pause_inf]

  GoBackInitHrp4+hum:
    base: Parallel
    states: [GoBackInitHrp4, XsensHumanPose]

  HRP4pos+hum:
    base: Parallel
    states: [HRP4pos, XsensHumanPose, Pause_inf]

  HelpFSM:
    base: Meta
    transitions:
    - [Pause_2s, OK, TakePosition, Strict]
    # - [TakePosition, OK, HoldingBothHands, Strict]
    - [TakePosition, OK, MakeHandContacts, Strict] #KeepPosition
    # - [HoldingBothHands, OK, GoBackInitHrp4, Strict]
    - [MakeHandContacts, OK, KeepPositionCompli, Strict]
    - [KeepPositionCompli, OK, GoBackInitHrp4, Strict]
    - [GoBackInitHrp4, OK, HRP4pos, Strict]

  HelpDemo:
    base: Parallel
    states: [XsensHumanPose,  HelpFSM] #AddCollisionWithHuman,


# Transitions map for human tracking
transitions:  
- [HelpDemo, OK, HelpDemo, Strict]


# - [Pause, OK, XsensHumanPause, Strict]
# - [XsensHumanPause, OK, TakePosition+hum, Strict]
# - [TakePosition+hum, OK, holdingUp, Strict]
# - [holdingUp, OK, GoBackInitHrp4+hum, Strict]
# - [GoBackInitHrp4+hum, OK, HRP4pos+hum, Strict]


# Initial state
init: HelpDemo


ObserverPipelines:
- name: HRP4Pipeline                    # - Create a new pipeline
  gui: true                              #   diplay the pipeline in the GUI (default = false)
  log: true                              #   log observers (default)
  observers:                             #   declare which observers to use
  - type: Encoder                        # - Use an EncoderObserver
    config:    
      robot: hrp4 #e2dr
      updateRobot: hrp4 #e2dr                    
      position: encoderValues            #    - Sets joint position from encoder sensor values (default)
      velocity: encoderFiniteDifferences #    - Computes joint velocities by finite differences  (default)
      computeFV: true                    # We now have the estimation of each joint position and velocity and the corresponding body positions and velocities, but we are still missing the floating base
  - type: Attitude
    config: 
      bodySensor: Accelerometer 
  - type: KinematicInertial              # - Estimates the floating base state using the KinematicInertial observer
    update: true                         #   update the real robot instance from its results
    gui: true                            #   Displays the estimated velocity as an arrow (default)
    config:
      robot: hrp4 #e2dr
      updateRobot: hrp4 #e2dr
      bodySensor: Accelerometer          # This observer only uses roll and pitch rotation information from this sensor along with a kinematic anchor point and the robot kinematics between the anchor frame and the floating base frame. The anchor frame is expected to be provided through a datastore callback (see below for details)
# - name: HumanPipeline
#   gui: true
#   log: true
#   observers:
#   - type: Encoder                        # - Use an EncoderObserver
#     config: 
#       robot: human
#       updateRobot: human                             
#       position: encoderValues            #    - Sets joint position from encoder sensor values (default)
#       velocity: encoderFiniteDifferences #    - Computes joint velocities by finite differences  (default)
#       computeFV: true 
#   - type: BodySensor                     # - Use a BodySensor observer
#     update: true                        #   Do not update the real robot state
#     gui: true                           #   Do not display in the gui
#     config: 
#       robot: human                             
#       bodySensor: FloatingBase           #   In simulation, the interface will fill this sensor with ground truth values
#                                          #   The observer computes the position and velocity of the floating base
#                                          #   by transforming the sensor measurements to the floating base frame
  # - type: Attitude
  #   config: 
  #     robot: human
  #     bodySensor: Accelerometer 
  # - type: KinematicInertial              # - Estimates the floating base state using the KinematicInertial observer
  #   update: true                         #   update the real robot instance from its results
  #   gui: true                            #   Displays the estimated velocity as an arrow (default)
  #   config:
  #     robot: human
  #     updateRobot: human
  #     bodySensor: Accelerometer 


Plugins: [XsensPlugin]
# Plugins: [Replay]
# configuration for Replay plugin
Replay:
  log: ~/Bureau/logs_stand/poseOnly_vs_refVel_refAcc/refs_vel_acc.bin
  with-inputs: false
  with-outputs: false
  with-gui-inputs: false
  with-datastore-config: etc/trajectories/log-to-datastore.yaml

# configuration for XsensHuman state
Xsens:
  human:
    HipsLink:
      segment: "Pelvis"
    TorsoLink:
      segment: "T8" # Sternum
      offset:
        translation: [0, 0, 0.02]
        rotation: [0, 0, 0]
    HeadLink:
      segment: "Head"
      offset:
        translation: [0, 0, 0.02]
        rotation: [0, 0, 0]
    torso2rshoulder_1: #might be 2 instead of 1
      segment: "Right Upper Arm"
      offset:
        translation: [0, -0.01, 0.02]
        rotation: [0, 0, 0]
    RForearmLink:
      segment: "Right Forearm"
      offset:
        translation: [0, -0.02, 0.01]
        rotation: [0, 0, 0]
    RHandLink:
      segment: "Right Hand"
      offset:
        translation: [0, 0, 0.01]
        rotation: [0, 0, 0]
    torso2lshoulder_1:
      segment: "Left Upper Arm"
      offset:
        translation: [0, 0.01, 0.02]
        rotation: [0, 0, 0]
    LForearmLink:
      segment: "Left Forearm"
      offset:
        translation: [0, 0.02, 0.01]
        rotation: [0, 0, 0]
    LHandLink:
      segment: "Left Hand"
      offset:
        translation: [0, 0, 0.01]
        rotation: [0, 0, 0]
    RLegLink:
      segment: "Right Upper Leg"
      offset:
        translation: [0, 0, -0.05]
        rotation: [0, 0, 0]
    RShinLink:
      segment: "Right Lower Leg"
      offset:
        translation: [0, 0, 0]
        rotation: [0, 0, 0]
    RAnkleLink:
      segment: "Right Foot"
      offset:
        translation: [0, 0, 0]
        rotation: [0, 0, 0]
    LLegLink:
      segment: "Left Upper Leg"
      offset:
        translation: [0, 0, -0.05]
        rotation: [0, 0, 0]
    LShinLink:
      segment: "Left Lower Leg"
      offset:
        translation: [0, 0, 0]
        rotation: [0, 0, 0]
    LAnkleLink:
      segment: "Left Foot"
      offset:
        translation: [0, 0, 0]
        rotation: [0, 0, 0]
    
